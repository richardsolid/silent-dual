{"version":3,"file":"react-intersection-observer.esm.js","sources":["../src/observers.ts","../src/InView.tsx","../src/useInView.tsx"],"sourcesContent":["import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: Map<Element, string> = new Map();\n\nlet consecutiveRootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '';\n  if (RootIds.has(root)) return RootIds.get(root);\n  consecutiveRootId += 1;\n  RootIds.set(root, consecutiveRootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer for, when observer elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .join('|');\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          observer.thresholds.some(\n            (threshold) => entry.intersectionRatio >= threshold,\n          );\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n * Monitors scroll, and triggers the children function with updated props\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n  };\n\n  state: State = {\n    inView: false,\n    entry: undefined,\n  };\n\n  componentDidUpdate(prevProps: IntersectionObserverProps, prevState: State) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: false, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observers';\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nconst initialState: State = {\n  inView: false,\n  entry: undefined,\n};\n\nexport function useInView(\n  options: IntersectionOptions = {},\n): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>(initialState);\n\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      if (options.skip) {\n        return;\n      }\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (\n              entry.isIntersecting &&\n              options.triggerOnce &&\n              unobserve.current\n            ) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          options,\n        );\n      }\n    },\n    [\n      options.threshold,\n      options.root,\n      options.rootMargin,\n      options.triggerOnce,\n      options.skip,\n      options.trackVisibility,\n      options.delay,\n    ],\n  );\n\n  useEffect(() => {\n    if (!unobserve.current && !options.triggerOnce && !options.skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState(initialState);\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["ObserverMap","Map","RootIds","consecutiveRootId","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","map","key","join","createObserver","id","instance","elements","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","thresholds","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","observe","element","callbacks","push","unobserve","splice","indexOf","length","delete","size","disconnect","isPlainChildren","props","children","InView","React","constructor","undefined","node","triggerOnce","skip","setState","observeNode","onChange","componentDidUpdate","prevProps","prevState","rootMargin","delay","componentWillUnmount","_unobserveCb","handleChange","render","state","ref","handleNode","as","tag","initialState","useInView","setRef","current","useEffect","result"],"mappings":"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"}